## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
## Return a matrix that is the inverse of 'x'
}
matriz <- matrix(rexp(200, rate=.1), ncol=20)
matriz
matriz <- matrix(rexp(200, rate=.1), ncol=3)
matriz
matriz <- matrix(rexp(10 rate=.1), ncol=5)
matriz <- matrix(rexp(10, rate=.1), ncol=5)
matriz
matriz <- matrix(rexp(40, rate=.1), ncol=5)
matriz
matriz
makeCacheMatrix(matriz)
cacheSolve(matriz)
matriz <- matrix(1:9, nrow = 3, ncol = 3)
makeCacheMatrix(matriz)
cacheSolve(matriz)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(matriz)
matriz
makeCacheMatrix(matriz)
cacheSolve(matriz)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x[setInverse(m)]
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(matriz)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
## Return a matrix that is the inverse of 'x'
}
matriz <- matrix(1:4, 2, 2)
cacheM <- makeCacheMatrix(matrzi)
cacheM <- makeCacheMatrix(matriz)
cacheM$get()
cacheM$getInverse()
cacheSolve(cacheM)
matriz <- makeCacheMatrix(matrix(1:9, 3, 3))
matriz$get()
matriz$getInverse()
cacheSolve(matriz)
matriz <- makeCacheMatrix(matrix(1:4, 2, 2))
matriz$getInverse()
matriz$get()
matriz$getInverse()
cacheSolve(matriz)
cacheSolve(matriz)
matriz$getInverse()
